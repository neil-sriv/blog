<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Swe on neilsriv blog</title>
    <link>https://blog.neilsriv.tech/tags/swe/</link>
    <description>Recent content in Swe on neilsriv blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <managingEditor>neil.srivastava1@gmail.com (neil Srivastava)</managingEditor>
    <webMaster>neil.srivastava1@gmail.com (neil Srivastava)</webMaster>
    <lastBuildDate>Mon, 02 Jun 2025 11:25:06 -0600</lastBuildDate>
    <atom:link href="https://blog.neilsriv.tech/tags/swe/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>building semantic and keyword search on cockroachDB</title>
      <link>https://blog.neilsriv.tech/tech/search/</link>
      <pubDate>Mon, 02 Jun 2025 11:25:06 -0600</pubDate><author>neil.srivastava1@gmail.com (neil Srivastava)</author>
      <guid>https://blog.neilsriv.tech/tech/search/</guid>
      <description>&lt;h2 id=&#34;why-is-search-interesting&#34;&gt;why is search interesting? &lt;a class=&#34;anchor&#34; href=&#34;#why-is-search-interesting&#34;&#xA;        title=&#34;Link to section: why is search interesting?&#34; aria-label=&#34;Link to section: why is search interesting?&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;search&lt;/code&gt; as a concept has dominated software since even before &lt;code&gt;Google&lt;/code&gt;&amp;rsquo;s success in monetizing it from graph searching algorithms to networking to vector databases. personally, I find the implementation details quite interesting because there are a myriad of optimizations, algorithms, and implementations to help store &lt;em&gt;relevant&lt;/em&gt; information about a piece of data, such that you can identify when it is the correct time to fetch that data.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="why-is-search-interesting">why is search interesting? <a class="anchor" href="#why-is-search-interesting"
        title="Link to section: why is search interesting?" aria-label="Link to section: why is search interesting?">#</a></h2><p><code>search</code> as a concept has dominated software since even before <code>Google</code>&rsquo;s success in monetizing it from graph searching algorithms to networking to vector databases. personally, I find the implementation details quite interesting because there are a myriad of optimizations, algorithms, and implementations to help store <em>relevant</em> information about a piece of data, such that you can identify when it is the correct time to fetch that data.</p>
<p>it&rsquo;s not the most commonly worked on topic either. the majority of software engineers can build a simple CRUD application with sign-in, but they often use third-party libraries or services for search implementations. and we aren&rsquo;t talking about pure frontend search over arrays of objects. I&rsquo;m referring to specialized indexes and databases of search <em>documents</em>.</p>
<p>I was also partially inspired by <code>cockroach labs</code> <a href="https://www.cockroachlabs.com/blog/vector-search-pgvector-cockroachdb/">post</a> on building vector search in the first place.</p>
<h2 id="why-not-elasticsearch">why not elasticsearch <a class="anchor" href="#why-not-elasticsearch"
        title="Link to section: why not elasticsearch" aria-label="Link to section: why not elasticsearch">#</a></h2><p>for the simple reason of not wanting to pay for a managed search service or use valuable memory and storage on a dedicated search container and index on my deploy. plus, the added benefit of showing that you don&rsquo;t need the fanciest tools to get a basic search implementation.</p>
<h2 id="what-is-semantic-search">what is &ldquo;semantic&rdquo; search <a class="anchor" href="#what-is-semantic-search"
        title="Link to section: what is &ldquo;semantic&rdquo; search" aria-label="Link to section: what is &ldquo;semantic&rdquo; search">#</a></h2><p>the last thing to talk about before getting into the technicals is <code>semantic search</code>. there are simple implementations of text search that essentially just do &ldquo;keyword searching&rdquo; and <code>elasticsearch</code> includes features like indexing on attributes of data, but both of these solutions usually fail to parse the <em>meaning</em> of a piece of text before indexing it. <em>meaning</em> can be subjective but typically it&rsquo;s helpful to think about the context of a word in a sentence or paragraph. it&rsquo;s sometimes helpful to know that a phrase is &ldquo;positive&rdquo; or perhaps more relevant to specific locations and people rather than if someone searches for an exact keyword that is in the search entry.</p>
<h2 id="implementation-overview">implementation overview <a class="anchor" href="#implementation-overview"
        title="Link to section: implementation overview" aria-label="Link to section: implementation overview">#</a></h2><p>the basic implementation plan is to create a table of search <code>documents</code> that includes a raw text column, a column for keyword search values, and a column for semantic search values. the keyword search values will be computed using a stored/computed db column with <code>to_tsvector</code>, a <code>postgres</code> built-in function to convert text to a form optimized for text search. the semantic search values are computed using optimized text embedding models like <code>nomic-embed-text</code> and google&rsquo;s <code>models/text-embedding-004</code>. lastly, I&rsquo;ll add an index for each column: an inverted index for keyword search and a vector index for semantic search.</p>
<p>I&rsquo;ll also need to create an association table to map the models I want to search over to their relevant search documents. for now it will be fine to assume that each model will only correspond to one document.</p>
<h3 id="cockroachdb-custom-set-up"><code>cockroachdb</code> custom set-up <a class="anchor" href="#cockroachdb-custom-set-up"
        title="Link to section: cockroachdb custom set-up" aria-label="Link to section: cockroachdb custom set-up">#</a></h3><p>referring to <code>cockroach labs</code> vector search <a href="https://www.cockroachlabs.com/docs/stable/full-text-search">post</a> and their full-text search <a href="https://www.cockroachlabs.com/docs/stable/full-text-search">docs</a>, I knew that <code>pgvector</code> was supported, vector indexing was coming in <code>v25.2.0</code>, and <code>tsvector</code> was already supported.</p>
<p>I did have to pull the unstable <code>v25.2.0</code> image (<code>cockroachdb/cockroach-unstable:v25.2.0-rc.1</code>) for local development and enable vector indexing with</p>

<figure class="highlight">
  <pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#ff79c6">SET</span> <span style="color:#ff79c6">CLUSTER</span> SETTING feature.vector_index.enabled <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span>;</span></span></code></pre>
</figure>
<h3 id="document-model">document model <a class="anchor" href="#document-model"
        title="Link to section: document model" aria-label="Link to section: document model">#</a></h3><p>let&rsquo;s take a look at the document model</p>

<figure class="highlight">
  <pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#ff79c6">from</span> pgvector <span style="color:#ff79c6">import</span> Vector
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span><span style="color:#ff79c6">class</span> <span style="color:#50fa7b">HybridSearchDocument</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>	<span style="color:#ff79c6">...</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>    raw_text: Mapped[<span style="color:#8be9fd;font-style:italic">str</span>] <span style="color:#ff79c6">=</span> mapped_column(nullable<span style="color:#ff79c6">=</span><span style="color:#ff79c6">False</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>    text_tsv_expr_literal <span style="color:#ff79c6">=</span> literal_column(<span style="color:#f1fa8c">&#34;text_tsv&#34;</span>, type_<span style="color:#ff79c6">=</span>TSVECTOR)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>    text_embedding_768: Mapped[Vector] <span style="color:#ff79c6">=</span> mapped_column(
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>        Vector(dim<span style="color:#ff79c6">=</span><span style="color:#bd93f9">768</span>), nullable<span style="color:#ff79c6">=</span><span style="color:#ff79c6">False</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>    )</span></span></code></pre>
</figure>
<p>there are only 3 interesting columns:</p>
<ul>
<li><code>raw_text</code>: the raw text that users may be searching for. This will be compiled at document creation time and filled with relevant content for the corresponding model, like <code>name</code>, <code>description</code>, <code>creator</code>, etc.</li>
<li><code>text_tsv_expr_literal</code>: this is a <code>literal</code> column, meaning not managed by <code>sqlalchemy</code> directly since <code>sqlalchemy</code> seemed to have issues with computed columns. the column is instantiated through a database migration and is a &ldquo;STORED&rdquo; column that will directly compute the <code>ts_vector</code> value of the <code>raw_text</code> column:</li>
</ul>

<figure class="highlight">
  <pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#ff79c6">ALTER</span> <span style="color:#ff79c6">TABLE</span> hybrid_search_document <span style="color:#ff79c6">ADD</span> <span style="color:#ff79c6">COLUMN</span> <span style="color:#ff79c6">IF</span> <span style="color:#ff79c6">NOT</span> <span style="color:#ff79c6">EXISTS</span> text_tsv TSVECTOR <span style="color:#ff79c6">AS</span> (to_tsvector(<span style="color:#f1fa8c">&#39;english&#39;</span>, raw_text)) STORED;</span></span></code></pre>
</figure>
<ul>
<li><code>text_embedding_768</code>: the vector generated by an embedding model based off the <code>raw_text</code>. This will be computed at document creation time. I use <code>768</code> as the dimension size since that is the most common dimension size computed by embedding models.</li>
</ul>
<h3 id="indexes">indexes <a class="anchor" href="#indexes"
        title="Link to section: indexes" aria-label="Link to section: indexes">#</a></h3><p>to more efficiently execute an actual search query, I need some important indexes:</p>
<p>an inverted index on the computed <code>tsvector</code> column</p>

<figure class="highlight">
  <pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#ff79c6">CREATE</span> INVERTED <span style="color:#ff79c6">INDEX</span> <span style="color:#ff79c6">IF</span> <span style="color:#ff79c6">NOT</span> <span style="color:#ff79c6">EXISTS</span> content_search_inverted_idx <span style="color:#ff79c6">ON</span> hybrid_search_document (text_tsv);</span></span></code></pre>
</figure>
<p>inverted indexes are probably the most common kind of index for search data since I am pretty much always searching for the actual contents of a <code>document</code> and never for a specific <code>document</code> itself. Basically I am never going from <code>document</code> -&gt; <code>search values</code>.</p>
<p>and a <code>Vector</code> index on the embedded <code>Vector</code> column</p>

<figure class="highlight">
  <pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#ff79c6">CREATE</span> VECTOR <span style="color:#ff79c6">INDEX</span> <span style="color:#ff79c6">IF</span> <span style="color:#ff79c6">NOT</span> <span style="color:#ff79c6">EXISTS</span> embedding_768_vector_idx <span style="color:#ff79c6">ON</span> hybrid_search_document (text_embedding_768);</span></span></code></pre>
</figure>
<p>unfortunately, neither of these indexes could be managed by <code>sqlalchemy</code> either and had to be manually added to the tables via migration as well.</p>
<p>so the search document table is actually fully set-up now and I can add documents and construct search queries. But how will I know what model/data the document actually represents? simplest solution is an association table</p>
<h3 id="association-table">association table <a class="anchor" href="#association-table"
        title="Link to section: association table" aria-label="Link to section: association table">#</a></h3><p>the association table will actually be fairly abstract in this scenario since I don&rsquo;t want to add <code>ForeignKeys</code> every time a new searchable model is added. so I use weak references to a model&rsquo;s unique identifier and hydrate the model references after each search query. this can be optimized with batching queries per model table as well.</p>

<figure class="highlight">
  <pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#ff79c6">class</span> <span style="color:#50fa7b">HybridSearchDocumentAssociation</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>    hybrid_search_document_id: Mapped[<span style="color:#8be9fd;font-style:italic">int</span>] <span style="color:#ff79c6">=</span> mapped_column(
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>        ForeignKey(
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>            <span style="color:#f1fa8c">&#34;hybrid_search_document.id&#34;</span>,
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>            name<span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;association_hybrid_search_document_id_fkey&#34;</span>,
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>            ondelete<span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;CASCADE&#34;</span>,
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>        ),
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>        nullable<span style="color:#ff79c6">=</span><span style="color:#ff79c6">False</span>,
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>    )
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>    model_api_identifier: Mapped[<span style="color:#8be9fd;font-style:italic">str</span>] <span style="color:#ff79c6">=</span> mapped_column(nullable<span style="color:#ff79c6">=</span><span style="color:#ff79c6">False</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>    model_type: Mapped[<span style="color:#8be9fd;font-style:italic">str</span>] <span style="color:#ff79c6">=</span> mapped_column(nullable<span style="color:#ff79c6">=</span><span style="color:#ff79c6">False</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>    document: Mapped[<span style="color:#f1fa8c">&#34;HybridSearchDocument&#34;</span>] <span style="color:#ff79c6">=</span> relationship(
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>        back_populates<span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;associations&#34;</span>,
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>    )
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17</span><span><span style="color:#ff79c6">class</span> <span style="color:#50fa7b">HybridSearchDocument</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18</span><span>	<span style="color:#ff79c6">...</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19</span><span>	associations: Mapped[<span style="color:#8be9fd;font-style:italic">list</span>[HybridSearchDocumentAssociation]] <span style="color:#ff79c6">=</span> relationship(
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20</span><span>	<span style="color:#f1fa8c">&#34;HybridSearchDocumentAssociation&#34;</span>, back_populates<span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;document&#34;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21</span><span>    )</span></span></code></pre>
</figure>
<p>the 3 interesting columns this time are:</p>
<ul>
<li><code>hybrid_search_document_id</code>: a foreign key column that links an association to a document. the delete behavior is set to remove associations if a document is removed</li>
<li><code>model_api_identifier</code>: a weak reference to the unique identifier for the model that is related to the search query. for now, each model will be one-to-one with a search document.</li>
<li><code>model_type</code>: just a quick categorization column to help batch hydration queries</li>
</ul>
<p>I also added <code>sqlalchemy</code> relationships on both the document class and the association class so that I can reference the associations from its document after a search query.</p>
<h3 id="search-queries">search queries <a class="anchor" href="#search-queries"
        title="Link to section: search queries" aria-label="Link to section: search queries">#</a></h3><p>I ended up writing 3 query functions: one for semantic search, one for keyword search, and one for a union of the two.</p>

<figure class="highlight">
  <pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#ff79c6">def</span> <span style="color:#50fa7b">semantic_search_hybrid_search_document</span>(
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>    db: Session, query: <span style="color:#8be9fd;font-style:italic">str</span>, limit: <span style="color:#8be9fd;font-style:italic">int</span> <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">10</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>) <span style="color:#ff79c6">-&gt;</span> <span style="color:#8be9fd;font-style:italic">list</span>[HybridSearchDocument]:
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>    text_embedding <span style="color:#ff79c6">=</span> _generate_text_embedding(query)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>    <span style="color:#ff79c6">return</span> (
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>        db<span style="color:#ff79c6">.</span>query(HybridSearchDocument)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>        <span style="color:#ff79c6">.</span>filter(
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>            HybridSearchDocument<span style="color:#ff79c6">.</span>text_embedding_768<span style="color:#ff79c6">.</span>l2_distance(text_embedding)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>            <span style="color:#ff79c6">&lt;</span> <span style="color:#bd93f9">0.5</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>        )
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>        <span style="color:#ff79c6">.</span>order_by(
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>            HybridSearchDocument<span style="color:#ff79c6">.</span>text_embedding_768<span style="color:#ff79c6">.</span>l2_distance(text_embedding)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>        )
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>        <span style="color:#ff79c6">.</span>limit(limit)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>        <span style="color:#ff79c6">.</span>all()
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16</span><span>    )</span></span></code></pre>
</figure>
<p>for semantic search, it&rsquo;s necessary to first generate a text embedding from the search query and use that to find search results. <code>Vector</code> columns from <code>pgvector</code> have an <code>l2_distance</code> comparator which compares the euclidian distance from an input embedding. and I arbitrarily chose <code>0.5</code> as my distance limit.</p>

<figure class="highlight">
  <pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#ff79c6">def</span> <span style="color:#50fa7b">keyword_search_hybrid_search_document</span>(
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>    db: Session, query: <span style="color:#8be9fd;font-style:italic">str</span>, limit: <span style="color:#8be9fd;font-style:italic">int</span> <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">10</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>) <span style="color:#ff79c6">-&gt;</span> <span style="color:#8be9fd;font-style:italic">list</span>[HybridSearchDocument]:
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>    tsquery <span style="color:#ff79c6">=</span> func<span style="color:#ff79c6">.</span>plainto_tsquery(<span style="color:#f1fa8c">&#34;english&#34;</span>, query)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>    <span style="color:#ff79c6">return</span> (
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>        db<span style="color:#ff79c6">.</span>query(HybridSearchDocument)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>        <span style="color:#ff79c6">.</span>filter(HybridSearchDocument<span style="color:#ff79c6">.</span>text_tsv_expr_literal<span style="color:#ff79c6">.</span>op(<span style="color:#f1fa8c">&#34;@@&#34;</span>)(tsquery))
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>        <span style="color:#ff79c6">.</span>order_by(
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>            func<span style="color:#ff79c6">.</span>ts_rank(
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>                HybridSearchDocument<span style="color:#ff79c6">.</span>text_tsv_expr_literal, tsquery
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>            )<span style="color:#ff79c6">.</span>desc()
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>        )
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>        <span style="color:#ff79c6">.</span>limit(limit)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>        <span style="color:#ff79c6">.</span>all()
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>    )</span></span></code></pre>
</figure>
<p>for keyword search, I used a specific query function which will tokenize the search query. and then the actual comparator operator is <code>@@</code> which is the <code>postgres</code> text search match operator.</p>

<figure class="highlight">
  <pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#ff79c6">def</span> <span style="color:#50fa7b">dual_search_hybrid_search_document</span>(
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>    db: Session, query: <span style="color:#8be9fd;font-style:italic">str</span>, limit: <span style="color:#8be9fd;font-style:italic">int</span> <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">10</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>) <span style="color:#ff79c6">-&gt;</span> <span style="color:#8be9fd;font-style:italic">list</span>[HybridSearchDocument]:
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>    text_embedding <span style="color:#ff79c6">=</span> _generate_text_embedding(query)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>    tsquery <span style="color:#ff79c6">=</span> func<span style="color:#ff79c6">.</span>plainto_tsquery(<span style="color:#f1fa8c">&#34;english&#34;</span>, query)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>    <span style="color:#ff79c6">return</span> (
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>        db<span style="color:#ff79c6">.</span>query(HybridSearchDocument)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>        <span style="color:#ff79c6">.</span>filter(
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>            or_(
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>                HybridSearchDocument<span style="color:#ff79c6">.</span>text_embedding_768<span style="color:#ff79c6">.</span>l2_distance(
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>                    text_embedding
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>                )
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>                <span style="color:#ff79c6">&lt;</span> <span style="color:#bd93f9">0.5</span>,
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>                HybridSearchDocument<span style="color:#ff79c6">.</span>text_tsv_expr_literal<span style="color:#ff79c6">.</span>op(<span style="color:#f1fa8c">&#34;@@&#34;</span>)(tsquery),
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>            )
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16</span><span>        )
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17</span><span>        <span style="color:#ff79c6">.</span>order_by(
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18</span><span>            HybridSearchDocument<span style="color:#ff79c6">.</span>text_embedding_768<span style="color:#ff79c6">.</span>l2_distance(
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19</span><span>                text_embedding
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20</span><span>            ),
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21</span><span>            func<span style="color:#ff79c6">.</span>ts_rank(
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22</span><span>                HybridSearchDocument<span style="color:#ff79c6">.</span>text_tsv_expr_literal, tsquery
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23</span><span>            )<span style="color:#ff79c6">.</span>desc(),
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24</span><span>        )
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25</span><span>        <span style="color:#ff79c6">.</span>limit(limit)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26</span><span>        <span style="color:#ff79c6">.</span>all()
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27</span><span>    )</span></span></code></pre>
</figure>
<p>lastly for dual search, I just <code>or</code> the two filters together.</p>
<h3 id="result-hydration">result hydration <a class="anchor" href="#result-hydration"
        title="Link to section: result hydration" aria-label="Link to section: result hydration">#</a></h3><p>the search queries just return search documents, so next I have to &ldquo;hydrate&rdquo; my search results with the models they are associated with.</p>
<p>I already have model getters based on their reference ids and the tables have the necessary index to make it fast</p>

<figure class="highlight">
  <pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#ff79c6">def</span> <span style="color:#50fa7b">get_models</span>(
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>    db: Session, model_cls: <span style="color:#8be9fd;font-style:italic">type</span>[API_CLS], api_ids: <span style="color:#8be9fd;font-style:italic">list</span>[<span style="color:#8be9fd;font-style:italic">str</span>]
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>) <span style="color:#ff79c6">-&gt;</span> Sequence[API_CLS]:
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>	<span style="color:#ff79c6">return</span> db<span style="color:#ff79c6">.</span>query(model_cls)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span>		<span style="color:#ff79c6">.</span>filter(model_cls<span style="color:#ff79c6">.</span>api_identifier<span style="color:#ff79c6">.</span>in_(api_ids))
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6</span><span>		<span style="color:#ff79c6">.</span>all()</span></span></code></pre>
</figure>
<p>the more interesting part was linking each model to it&rsquo;s search association rows by <code>HybridSearchDocumentAssociation.model_type</code>. I use a <code>registry pattern</code> to register searchable sqlalchemy models with their search <code>model_type</code>:</p>

<figure class="highlight">
  <pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span>SEARCH_MODEL_REGISTRY: RegistrationDict[<span style="color:#8be9fd;font-style:italic">str</span>, <span style="color:#8be9fd;font-style:italic">type</span>[APIIdentified]] <span style="color:#ff79c6">=</span> (
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>    RegistrationDict(<span style="color:#f1fa8c">&#34;SEARCH_MODEL_REGISTRY&#34;</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span><span style="color:#ff79c6">def</span> <span style="color:#50fa7b">register_searchable_model</span>(model_type: <span style="color:#8be9fd;font-style:italic">str</span>):
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>    <span style="color:#ff79c6">def</span> <span style="color:#50fa7b">decorator</span>(cls: <span style="color:#8be9fd;font-style:italic">type</span>[APIIdentified]) <span style="color:#ff79c6">-&gt;</span> <span style="color:#8be9fd;font-style:italic">type</span>[APIIdentified]:
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>        @wraps(cls)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>        <span style="color:#ff79c6">def</span> <span style="color:#50fa7b">wrapper</span>(<span style="color:#ff79c6">*</span>args, <span style="color:#ff79c6">**</span>kwargs):
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>            <span style="color:#ff79c6">return</span> cls(<span style="color:#ff79c6">*</span>args, <span style="color:#ff79c6">**</span>kwargs)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>        SEARCH_MODEL_REGISTRY[model_type] <span style="color:#ff79c6">=</span> cls
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>        <span style="color:#ff79c6">return</span> cls
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>    <span style="color:#ff79c6">return</span> decorator</span></span></code></pre>
</figure>
<p>the actual usage becomes very simple:</p>

<figure class="highlight">
  <pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span>@register_searchable_model(<span style="color:#f1fa8c">&#34;letter&#34;</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span><span style="color:#ff79c6">class</span> <span style="color:#50fa7b">Letter</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>	<span style="color:#ff79c6">...</span></span></span></code></pre>
</figure>

          <link rel="stylesheet" href="/css/vendors/admonitions.5c73bad2903e7d2d44ad118370ebd8c2cf5f239d4d93c283e55c00f2f8d30746.css" integrity="sha256-XHO60pA&#43;fS1ErRGDcOvYws9fI51Nk8KD5VwA8vjTB0Y=" crossorigin="anonymous">
  <div class="admonition note">
    <div class="admonition-header">
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512"><path d="M0 64C0 28.7 28.7 0 64 0L224 0l0 128c0 17.7 14.3 32 32 32l128 0 0 125.7-86.8 86.8c-10.3 10.3-17.5 23.1-21 37.2l-18.7 74.9c-2.3 9.2-1.8 18.8 1.3 27.5L64 512c-35.3 0-64-28.7-64-64L0 64zm384 64l-128 0L256 0 384 128zM549.8 235.7l14.4 14.4c15.6 15.6 15.6 40.9 0 56.6l-29.4 29.4-71-71 29.4-29.4c15.6-15.6 40.9-15.6 56.6 0zM311.9 417L441.1 287.8l71 71L382.9 487.9c-4.1 4.1-9.2 7-14.9 8.4l-60.1 15c-5.5 1.4-11.2-.2-15.2-4.2s-5.6-9.7-4.2-15.2l15-60.1c1.4-5.6 4.3-10.8 8.4-14.9z"/></svg>
      <span>caveat about registration pattern</span>
    </div>
      <div class="admonition-content">
        <p>this relies on all models being imported when my app starts up to ensure that the <code>SEARCH_MODEL_REGISTRY</code> is fully populated. I achieve this by ensuring that I run a function <code>import_all_sqla_models</code> which imports all <code>sqla</code> models at startup</p>
      </div>
  </div>
<h2 id="whats-left">what&rsquo;s left? <a class="anchor" href="#whats-left"
        title="Link to section: what&rsquo;s left?" aria-label="Link to section: what&rsquo;s left?">#</a></h2><h3 id="document-creation-and-backfills">document creation and backfills <a class="anchor" href="#document-creation-and-backfills"
        title="Link to section: document creation and backfills" aria-label="Link to section: document creation and backfills">#</a></h3><h4 id="creation">creation <a class="anchor" href="#creation"
        title="Link to section: creation" aria-label="Link to section: creation">#</a></h4><p>I have 5 different models that will be searchable in the initial release:
two party-type models</p>
<ul>
<li><code>User</code></li>
<li><code>Group</code>
content-type models that have large text strings</li>
<li><code>Letter</code></li>
<li><code>Question</code></li>
<li><code>Response</code></li>
</ul>
<p>I need to add logic for creating a search document when each individual model is created, something like</p>

<figure class="highlight">
  <pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#ff79c6">def</span> <span style="color:#50fa7b">create_user</span>(<span style="color:#ff79c6">...</span>):
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>	user <span style="color:#ff79c6">=</span> User<span style="color:#ff79c6">.</span>create(<span style="color:#ff79c6">...</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>	<span style="color:#6272a4"># TODO: define the raw text for a user</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>	raw_text <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">f</span><span style="color:#f1fa8c">&#34;name:</span><span style="color:#f1fa8c">{</span>user<span style="color:#ff79c6">.</span>name<span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">;email:</span><span style="color:#f1fa8c">{</span>user<span style="color:#ff79c6">.</span>email<span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">&#34;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span>	user_document <span style="color:#ff79c6">=</span> create_hybrid_search_document(raw_text, user<span style="color:#ff79c6">.</span>api_identifier, <span style="color:#f1fa8c">&#34;user&#34;</span>)</span></span></code></pre>
</figure>
<p>defining the text shape for each model will be the bulk of the work here but there is lots of room to iterate and test things out.\</p>
<h4 id="backfills">backfills <a class="anchor" href="#backfills"
        title="Link to section: backfills" aria-label="Link to section: backfills">#</a></h4><p>I&rsquo;ll need to create scripts to backfill documents for all existing models in production. these scripts will be idempotent so they can be re-run to regenerate search documents in case the logic for converting models to representative text changes.</p>
<h3 id="search-filtering">search filtering <a class="anchor" href="#search-filtering"
        title="Link to section: search filtering" aria-label="Link to section: search filtering">#</a></h3><p>it would be useful to filter to just types of models that a user wanted in particular or even filter on the attributes of a model. for example, searching for only <code>users</code> or searching for <code>users</code> that are in a particular <code>group</code></p>
<h3 id="model-relationships">model relationships <a class="anchor" href="#model-relationships"
        title="Link to section: model relationships" aria-label="Link to section: model relationships">#</a></h3><p>if you think about all the models as a connected, bi-directional, cyclic graph, keeping track of the edges could be useful from a search perspective. for example, if I search for a user&rsquo;s email, maybe it would be good to also see all the groups they are in.</p>
<p>the overhead of maintaining this may be tough though, especially because we are not dealing with a <code>dag</code> or a <code>polytree</code>.</p>
<h2 id="future-use-cases-for-embedded-text-vectors">future use-cases for embedded text vectors <a class="anchor" href="#future-use-cases-for-embedded-text-vectors"
        title="Link to section: future use-cases for embedded text vectors" aria-label="Link to section: future use-cases for embedded text vectors">#</a></h2><ul>
<li>RAG-implementations can use semantic search to find related content to improve the context for an LLM</li>
<li>data-science use-cases like clustering and anomaly detection</li>
<li>recommendations by finding content that similar to a user&rsquo;s content</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>migrating my aws database to cockroach labs in 12 hours</title>
      <link>https://blog.neilsriv.tech/tech/db_migration/</link>
      <pubDate>Wed, 09 Apr 2025 01:01:56 -0400</pubDate><author>neil.srivastava1@gmail.com (neil Srivastava)</author>
      <guid>https://blog.neilsriv.tech/tech/db_migration/</guid>
      <description>&lt;p&gt;if you don&amp;rsquo;t know, I run a side project called Ring, a small newsletter platform where groups of friends answer monthly questions that are collected and sent in an email. the entire project is hosted for free on AWS on a single EC2 machine with 1GB of memory and a postgres rds instance. unfortunately, these free tier benefits only last 1 year&amp;hellip;&lt;/p&gt;&#xA;&lt;p&gt;so at the beginning of march, I finally get the dreaded email that my aws free tier benefits were ending on the 31st. I, of course, immediately forget about this and procrastinate doing anything about it. to be fair, I was moving into a new apartment and was very distracted. regardless, I found myself on March 31st with about 12 hours before I was about to get hit by an estimated $60 monthly bill for running everything.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>if you don&rsquo;t know, I run a side project called Ring, a small newsletter platform where groups of friends answer monthly questions that are collected and sent in an email. the entire project is hosted for free on AWS on a single EC2 machine with 1GB of memory and a postgres rds instance. unfortunately, these free tier benefits only last 1 year&hellip;</p>
<p>so at the beginning of march, I finally get the dreaded email that my aws free tier benefits were ending on the 31st. I, of course, immediately forget about this and procrastinate doing anything about it. to be fair, I was moving into a new apartment and was very distracted. regardless, I found myself on March 31st with about 12 hours before I was about to get hit by an estimated $60 monthly bill for running everything.</p>
<p>the bill breakdown was about:</p>
<ul>
<li>$45 for 750 hours (24/7 up-time) 10 GB postgres rds database</li>
<li>$10 for 750 hours (24/7 up-time) 1 GB EC2 machine</li>
<li>&lt;$5 for miscellaneous aws services (S3, VPC, CDN, etc.)</li>
</ul>
<p>so with a limited timeline, I decided to just focus on the high database cost problem for now.</p>
<p>TL;DR: I migrated my 2GB Postgres database from AWS RDS to CockroachDB in a day to avoid a $60/month bill. here’s how I pulled it off (and how TLS almost broke me).</p>
<h2 id="so-what-do-i-actually-need">so what do I actually need? <a class="anchor" href="#so-what-do-i-actually-need"
        title="Link to section: so what do I actually need?" aria-label="Link to section: so what do I actually need?">#</a></h2><ul>
<li>a managed RDS database</li>
<li>free if possible</li>
<li>current DB size is about 2GB so probably at least 5 GB would be good</li>
<li>750 hours of uptime</li>
<li>compatibility with postgres, sqlalchemy, and alembic all preferred</li>
</ul>
<h2 id="are-there-really-no-free-databases-these-days">are there really no free databases these days?? <a class="anchor" href="#are-there-really-no-free-databases-these-days"
        title="Link to section: are there really no free databases these days??" aria-label="Link to section: are there really no free databases these days??">#</a></h2><p>unfortunately not really! it&rsquo;s been long since the days where you could spin up heroku compute instances, mongodb nosql databases, or most personal usage of common software infrastructure for free. <em>well at least the limits are way lower now and the timelines are shortish.</em> I began searching around for options of free managed database hosting services; chatgpt is great for enumerating options and giving pros/cons but make sure you double check what&rsquo;s provided. I was misled a couple times and thought certain options were possible but they had sunset their free options or the limits were too strict.</p>



  <blockquote>
    <p>specifically planetscale has no more free tier and supabase limits are too low</p>
  </blockquote>
<h2 id="bugs-to-the-rescue">bugs to the rescue <a class="anchor" href="#bugs-to-the-rescue"
        title="Link to section: bugs to the rescue" aria-label="Link to section: bugs to the rescue">#</a></h2><p>my savior ended up being <a href="https://www.cockroachlabs.com/pricing/"><strong>cockroach labs</strong></a> with 10GB of free storage (amazing) and 50 million read units (no idea what that means). I&rsquo;d never heard of cockroach before but it&rsquo;s a distributed database service, meaning it was built with replication and sharding across multiple database nodes as the primary focus. I don&rsquo;t really need all that but it does implement the postgres wire protocol, so the majority of all postgres features should work out of the box. there is additionally a sqlalchemy extension that enabled working with cockroach and alembic should work automatically.</p>
<h2 id="how-do-you-actually-migrate-a-database">how do you actually migrate a database <a class="anchor" href="#how-do-you-actually-migrate-a-database"
        title="Link to section: how do you actually migrate a database" aria-label="Link to section: how do you actually migrate a database">#</a></h2><p>well the correct way is through something called logical replication and dual writing data to two databases concurrently. but I have a 2 GB database with about 19 tables, so I can get away with just pg_dumping the database to a file and then executing the sql in it directly.</p>
<h2 id="downtime">downtime <a class="anchor" href="#downtime"
        title="Link to section: downtime" aria-label="Link to section: downtime">#</a></h2><p>downtime considerations are incredibly critical when migrating a database. if you have an &ldquo;always available&rdquo; service, downtime is likely not an actual option for you. in that case, you must use dual-writing and a cut-over to actually migrate onto another database. however, my newsletter service gets spiky traffic and has no real concerns with downtime as long as there are no newsletters scheduled soon. so I pushed a frontend image that was a simple downtime page informing users that the web-app would be up and running in a few days.</p>
<h2 id="lets-get-started">let&rsquo;s get started <a class="anchor" href="#lets-get-started"
        title="Link to section: let&rsquo;s get started" aria-label="Link to section: let&rsquo;s get started">#</a></h2><p>time to get my hands dirty and jump in.</p>
<p>I have a local database used for development and testing. it runs in a docker container with a persisted volume. can I do the same thing with cockroach and test running my app locally, migrating all the data from my local postgres container, and running alembic migrations?</p>
<h3 id="docker-containers">docker containers <a class="anchor" href="#docker-containers"
        title="Link to section: docker containers" aria-label="Link to section: docker containers">#</a></h3>
          <link rel="stylesheet" href="/css/vendors/admonitions.5c73bad2903e7d2d44ad118370ebd8c2cf5f239d4d93c283e55c00f2f8d30746.css" integrity="sha256-XHO60pA&#43;fS1ErRGDcOvYws9fI51Nk8KD5VwA8vjTB0Y=" crossorigin="anonymous">
  <div class="admonition note">
    <div class="admonition-header">
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512"><path d="M0 64C0 28.7 28.7 0 64 0L224 0l0 128c0 17.7 14.3 32 32 32l128 0 0 125.7-86.8 86.8c-10.3 10.3-17.5 23.1-21 37.2l-18.7 74.9c-2.3 9.2-1.8 18.8 1.3 27.5L64 512c-35.3 0-64-28.7-64-64L0 64zm384 64l-128 0L256 0 384 128zM549.8 235.7l14.4 14.4c15.6 15.6 15.6 40.9 0 56.6l-29.4 29.4-71-71 29.4-29.4c15.6-15.6 40.9-15.6 56.6 0zM311.9 417L441.1 287.8l71 71L382.9 487.9c-4.1 4.1-9.2 7-14.9 8.4l-60.1 15c-5.5 1.4-11.2-.2-15.2-4.2s-5.6-9.7-4.2-15.2l15-60.1c1.4-5.6 4.3-10.8 8.4-14.9z"/></svg>
      <span>docker vs orbstack</span>
    </div>
      <div class="admonition-content">
        <p>since I develop on macOS, I actually use <code>orbstack</code> instead of <code>docker desktop</code> with no issues</p>
      </div>
  </div>
<p>so my current postgres container is set up like this</p>

<figure class="highlight">
  <pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#ff79c6">db</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>    <span style="color:#ff79c6">restart</span>: unless-stopped
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>    <span style="color:#ff79c6">container_name</span>: ring-db
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>    <span style="color:#ff79c6">image</span>: postgres:16.1
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>    <span style="color:#ff79c6">volumes</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>      - pgdata:/var/lib/postgresql/data
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>    <span style="color:#ff79c6">ports</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>      - <span style="color:#bd93f9">8004</span>:<span style="color:#bd93f9">5432</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>    <span style="color:#ff79c6">expose</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>      - <span style="color:#bd93f9">5432</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>    <span style="color:#ff79c6">environment</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>      - POSTGRES_USER=REDACTED
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>      - POSTGRES_PASSWORD=REDACTED
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>      - POSTGRES_DB=ring
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>    <span style="color:#ff79c6">profiles</span>: [ <span style="color:#f1fa8c">&#34;dev&#34;</span> ]
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16</span><span>    <span style="color:#ff79c6">networks</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17</span><span>      - default</span></span></code></pre>
</figure>
<p>and it was pretty simple to get the cockroach container to run as well</p>

<figure class="highlight">
  <pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span>  <span style="color:#ff79c6">cockroach</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>    <span style="color:#ff79c6">image</span>: cockroachdb/cockroach:latest
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>    <span style="color:#ff79c6">container_name</span>: ring-cockroach
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>    <span style="color:#ff79c6">restart</span>: unless-stopped
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>    <span style="color:#ff79c6">profiles</span>: [ <span style="color:#f1fa8c">&#34;dev&#34;</span> ]
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>    <span style="color:#ff79c6">command</span>: start-single-node --certs-dir=/root/.cockroach-certs
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>    <span style="color:#ff79c6">ports</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>      - <span style="color:#bd93f9">26257</span>:<span style="color:#bd93f9">26257</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>      - <span style="color:#bd93f9">8007</span>:<span style="color:#bd93f9">8080</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>    <span style="color:#ff79c6">environment</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>      - COCKROACH_USER=ringcockroach
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>      - COCKROACH_PASSWORD=ringcockroach
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>      - COCKROACH_DATABASE=ring
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>    <span style="color:#ff79c6">volumes</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>      - cockroach-data:/cockroach/cockroach-data
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16</span><span>      - ./certs:/root/.cockroach-certs
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17</span><span>    <span style="color:#ff79c6">networks</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18</span><span>      - default</span></span></code></pre>
</figure>
<p>note the command: <code>start-single-node</code> since I don&rsquo;t need to spin up multiple nodes with replication or sharding.</p>
<p>the docs suggested spinning up in <code>--insecure-mode</code>, but that caused failures to create the default <code>COCKROACH_USER</code> with <code>COCKROACH_PASSWORD</code>. using the <em>secure</em> mode with ssl ended up being <em>interesting&hellip;</em></p>

  <div class="admonition error">
    <div class="admonition-header">
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM175 175c9.4-9.4 24.6-9.4 33.9 0l47 47 47-47c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9l-47 47 47 47c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0l-47-47-47 47c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l47-47-47-47c-9.4-9.4-9.4-24.6 0-33.9z"/></svg>
      <span>TLS 😭</span>
    </div>
      <div class="admonition-content">
        <p>I honestly don&rsquo;t know what TLS is and I am too lazy to really figure it out.
however
that really blew up in my face when trying to manage my <code>cockroachdb</code> local docker container.</p>



  <blockquote>
    <p>for my production server, the <code>cockroach</code> cloud set-up gives you the exact cert that you need and tells you where to mount it 🤷‍♂️. no problems there so far</p>
  </blockquote>
<p>the docs kept talking about doing things in insecure mode for local development, but then it wouldn&rsquo;t auto create the db user that I wanted. when naively doing things in secure mode, I thought it worked automatically; but that&rsquo;s only because I
first started the container in insecure mode so it auto created my db user and database, then took it down and restarted it in secure mode so it automatically generated TLS certs for the cockroach user. and then since I&rsquo;m using docker volumes to persist the state, things were working fine for the first day or two</p>
<p>but when I had to nuke my docker volume and restore from a backup because I messed up my database, I ended up in TLS hell.</p>
<p>the iteration cycle was spin up docker container while viewing logs -&gt; things break -&gt; take down container -&gt; delete volume -&gt; start again, over and over I was doing this with different certs, mounting the certs in different locations, trying different commands (e.g. cockroach start-single-node &ndash;cert-principal-map).</p>
<p>I eventually succeeded by creating the CA cert, the node cert, and a client cert for the &ldquo;root&rdquo; user and mounting all of those into a specified certs dir in my <code>cockroachdb</code> container. then when spinning up the container for the first time, it would auto create a client cert for the specified <code>COCKROACH_USER</code> I wanted. and now I can finally spin up and down the container as many times as I want. I don&rsquo;t get why I need all these certs <strong>and</strong> a &ldquo;root&rdquo; client cert when I only want access as the <code>COCKROACH_USER</code>.</p>



  <blockquote>
    <p>noting that if I remove my volume in the future for a hard reset, I will need to remove the autogenerated cert files from my certs directory mount</p>
  </blockquote>
      </div>
  </div>
<p>it was really convenient to be able to just <code>docker volume rm</code> and reset the persisted database as I was iterating on trying to get the <code>cockroach</code> db container up and running correctly</p>
<h3 id="fastapi-x-sqlalchemy-x-cockroach">fastapi x sqlalchemy x cockroach <a class="anchor" href="#fastapi-x-sqlalchemy-x-cockroach"
        title="Link to section: fastapi x sqlalchemy x cockroach" aria-label="Link to section: fastapi x sqlalchemy x cockroach">#</a></h3><p>replacing <code>postgres</code> with <code>cockroach</code> was really simple since I use <code>sqlalchemy</code> to connect to my database.</p>
<p>all I had to do was set my connection string to reference my <code>cockroach</code> container and pass the user and password for the <code>ring</code> database</p>

<figure class="highlight">
  <figcaption>
    <span class="title">.env</span>
  </figcaption>
  <pre tabindex="0" class="chroma"><code class="language-env" data-lang="env"><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#8be9fd;font-style:italic">COCKROACH_DATABASE_URI</span><span style="color:#ff79c6">=</span>cockroachdb://COCKROACH_USER:COCKROACH_PASSWORD@cockroach:26257/ring?sslmode<span style="color:#ff79c6">=</span>require</span></span></code></pre>
</figure>
<p>then I added the <code>sqlalchemy-cockroachdb</code> library using <code>uv</code></p>

  <div class="admonition note">
    <div class="admonition-header">
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512"><path d="M0 64C0 28.7 28.7 0 64 0L224 0l0 128c0 17.7 14.3 32 32 32l128 0 0 125.7-86.8 86.8c-10.3 10.3-17.5 23.1-21 37.2l-18.7 74.9c-2.3 9.2-1.8 18.8 1.3 27.5L64 512c-35.3 0-64-28.7-64-64L0 64zm384 64l-128 0L256 0 384 128zM549.8 235.7l14.4 14.4c15.6 15.6 15.6 40.9 0 56.6l-29.4 29.4-71-71 29.4-29.4c15.6-15.6 40.9-15.6 56.6 0zM311.9 417L441.1 287.8l71 71L382.9 487.9c-4.1 4.1-9.2 7-14.9 8.4l-60.1 15c-5.5 1.4-11.2-.2-15.2-4.2s-5.6-9.7-4.2-15.2l15-60.1c1.4-5.6 4.3-10.8 8.4-14.9z"/></svg>
      <span>uv</span>
    </div>
      <div class="admonition-content">
        <p>I use <code>uv</code> to manage my python project with a <code>pyproject.toml</code> which keeps things in sync and manages dependencies automatically</p>
      </div>
  </div>

<figure class="highlight">
  <pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span>uv add sqlalchemy-cockroachdb</span></span></code></pre>
</figure>
<p>I was able to create my <code>sqlalchemy</code> database engine in the exact same way I was doing it with <code>postgres</code> and just swapped the connection string.</p>

<figure class="highlight">
  <figcaption>
    <span class="title">sqlalchemy_base.py</span>
  </figcaption>
  <pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span>engine <span style="color:#ff79c6">=</span> create_engine(
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>    get_config()<span style="color:#ff79c6">.</span>cockroach_database_uri,
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>)</span></span></code></pre>
</figure>

  <div class="admonition note">
    <div class="admonition-header">
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512"><path d="M0 64C0 28.7 28.7 0 64 0L224 0l0 128c0 17.7 14.3 32 32 32l128 0 0 125.7-86.8 86.8c-10.3 10.3-17.5 23.1-21 37.2l-18.7 74.9c-2.3 9.2-1.8 18.8 1.3 27.5L64 512c-35.3 0-64-28.7-64-64L0 64zm384 64l-128 0L256 0 384 128zM549.8 235.7l14.4 14.4c15.6 15.6 15.6 40.9 0 56.6l-29.4 29.4-71-71 29.4-29.4c15.6-15.6 40.9-15.6 56.6 0zM311.9 417L441.1 287.8l71 71L382.9 487.9c-4.1 4.1-9.2 7-14.9 8.4l-60.1 15c-5.5 1.4-11.2-.2-15.2-4.2s-5.6-9.7-4.2-15.2l15-60.1c1.4-5.6 4.3-10.8 8.4-14.9z"/></svg>
      <span>get_config</span>
    </div>
      <div class="admonition-content">
        <p><code>get_config</code> is a cached function I wrote that just returns a <code>BaseSettings</code> object for my <code>fastapi</code> project. <code>BaseSettings</code> allows you to pass configuration settings to your <code>fastapi</code> app on startup through environment variables with <code>pydantic</code> features like field validation and computed fields.</p>
      </div>
  </div>
<p>for <code>alembic</code> and <code>pytest</code>, I used the same approach of swapping the connection string and had no issues</p>

<figure class="highlight">
  <figcaption>
    <span class="title">env.py</span>
  </figcaption>
  <pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span>config<span style="color:#ff79c6">.</span>set_main_option(<span style="color:#f1fa8c">&#34;sqlalchemy.url&#34;</span>, get_config()<span style="color:#ff79c6">.</span>cockroach_database_uri)</span></span></code></pre>
</figure>

<figure class="highlight">
  <figcaption>
    <span class="title">conftest.py</span>
  </figcaption>
  <pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span>engine <span style="color:#ff79c6">=</span> create_engine(config<span style="color:#ff79c6">.</span>cockroach_database_uri)</span></span></code></pre>
</figure>
<p>this is all it took to swap over to using <code>cockroach</code> for my local development environment, testing environment, and alembic configuration</p>
<h3 id="migrating-my-data---pg_dump-for-the-win">migrating my data - pg_dump for the win <a class="anchor" href="#migrating-my-data---pg_dump-for-the-win"
        title="Link to section: migrating my data - pg_dump for the win" aria-label="Link to section: migrating my data - pg_dump for the win">#</a></h3><p>dumping an entire database is as simple as running a single command</p>

<figure class="highlight">
  <pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span>docker <span style="color:#8be9fd;font-style:italic">exec</span> ring-db pg_dump -U ring-postgres -d ring &gt; local.sql</span></span></code></pre>
</figure>
<p>and then importing that into my <code>cockroach</code> container also only took a single command</p>

<figure class="highlight">
  <pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span>docker <span style="color:#8be9fd;font-style:italic">exec</span> -i ring-cockroach ./cockroach sql -d ring --url<span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;postgresql://ringcockroach@127.0.0.1:26257/ring?sslcert=%2Froot%2F.cockroach-certs%2Fclient.root.crt&amp;sslkey=%2Froot%2F.cockroach-certs%2Fclient.root.key&amp;sslmode=verify-full&amp;sslrootcert=%2Froot%2F.cockroach-certs%2Fca.crt&#34;</span> &lt; local.sql</span></span></code></pre>
</figure>
<p>if you are wondering where I got the connection url from, <code>cockroach</code> actually prints it out for you on container start which is super convenient (since, again, I don&rsquo;t know how TLS works)</p>
<p>I did basically the same thing for my production database with the only added complexity being that I had to upload my dump from the EC2 to S3 and I used my production database connection string and password.</p>
<h2 id="cutover-time">cutover time <a class="anchor" href="#cutover-time"
        title="Link to section: cutover time" aria-label="Link to section: cutover time">#</a></h2><p>at this point, I merged and pushed my changes to production since I was relatively sure that I could start reading from my new database and I wanted to start live testing before I decommissioned my postgres DB. I felt safe doing this because I had my pg_dump backup of all production data and knew that I could always restore from there.</p>
<p>and just like magic, the site worked perfectly on my first try.</p>
<p>no, I&rsquo;m serious!</p>
<p>it was a pretty cool feeling to be able to just switch databases and have no issues or real user impact.</p>
<h2 id="whats-next">what&rsquo;s next <a class="anchor" href="#whats-next"
        title="Link to section: what&rsquo;s next" aria-label="Link to section: what&rsquo;s next">#</a></h2><p>I haven&rsquo;t dove into any of the <code>cockroachdb</code> special stuff yet, sharding, replication, or other distributed database features but that will be on the back-burner. next step is to migrate off my EC2 container! I think that the couple dollars for S3 and Cloudfront CDN are pretty cheap but I don&rsquo;t want to pay $10 for the EC2.</p>
<p>finding a free hosting provider for a 750 hour uptime 1 GB EC2 is pretty difficult (okay maybe impossible). so I think this is a good opportunity to remove my celery dependency for async scheduled task execution and be able to use either serverless or cold start servers for my fastAPI backend. I&rsquo;m not sure what my celery replacement will be yet but for the API server, there are options like Neon and Fly.io.</p>
]]></content:encoded>
    </item>
    <item>
      <title>now</title>
      <link>https://blog.neilsriv.tech/now/</link>
      <pubDate>Wed, 12 Feb 2025 00:11:35 -0500</pubDate><author>neil.srivastava1@gmail.com (neil Srivastava)</author>
      <guid>https://blog.neilsriv.tech/now/</guid>
      <description>&lt;h1 id=&#34;what-am-i-doing-right-now&#34;&gt;what am I doing right now? &lt;a class=&#34;anchor&#34; href=&#34;#what-am-i-doing-right-now&#34;&#xA;        title=&#34;Link to section: what am I doing right now?&#34; aria-label=&#34;Link to section: what am I doing right now?&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;This page is inspired by &lt;a href=&#34;https://nownownow.com/about&#34;&gt;now page&lt;/a&gt; and is a work in progress.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;Last updated: 2025-02-12 from New York City, NY&lt;/em&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;moving-to-new-york&#34;&gt;moving to new york &lt;a class=&#34;anchor&#34; href=&#34;#moving-to-new-york&#34;&#xA;        title=&#34;Link to section: moving to new york&#34; aria-label=&#34;Link to section: moving to new york&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I finally moved to NYC in January 2025! After 2.5 years in San Francisco, I&amp;rsquo;ve moved over to the East Coast. Living in Manhattan for now and still working at &lt;a href=&#34;https://www.benchling.com/&#34;&gt;Benchling&lt;/a&gt;.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h1 id="what-am-i-doing-right-now">what am I doing right now? <a class="anchor" href="#what-am-i-doing-right-now"
        title="Link to section: what am I doing right now?" aria-label="Link to section: what am I doing right now?">#</a></h1><p>This page is inspired by <a href="https://nownownow.com/about">now page</a> and is a work in progress.</p>
<p><em>Last updated: 2025-02-12 from New York City, NY</em></p>
<h2 id="moving-to-new-york">moving to new york <a class="anchor" href="#moving-to-new-york"
        title="Link to section: moving to new york" aria-label="Link to section: moving to new york">#</a></h2><p>I finally moved to NYC in January 2025! After 2.5 years in San Francisco, I&rsquo;ve moved over to the East Coast. Living in Manhattan for now and still working at <a href="https://www.benchling.com/">Benchling</a>.</p>
<h2 id="building-a-personal-newsletter-service-for-my-friends-ring">building a personal newsletter service for my friends: ring <a class="anchor" href="#building-a-personal-newsletter-service-for-my-friends-ring"
        title="Link to section: building a personal newsletter service for my friends: ring" aria-label="Link to section: building a personal newsletter service for my friends: ring">#</a></h2><p>It&rsquo;s been about a year since I started working on a personal newsletter service for my friends and about 6 months since I published it for us to use. With about 45 monthly users, that&rsquo;s 3 unique groups (1 of which I&rsquo;m not even part of!), it&rsquo;s been a really fun journey evolving the platform.</p>
<p>Of course the whole service is very overengineered: I&rsquo;m using individual docker containers for all the services (nginx, celery, redis, fastapi), multiple AWS services (postgres RDS, SES, S3 + cloudfront), all hosted on a single EC2 machine with 1 GB of memory that costs <strong>absolutely nothing</strong> per month!</p>
<h2 id="location">location: <a class="anchor" href="#location"
        title="Link to section: location:" aria-label="Link to section: location:">#</a></h2><p>new york, new york, u.s.a.</p>
<h2 id="professional-title">professional title: <a class="anchor" href="#professional-title"
        title="Link to section: professional title:" aria-label="Link to section: professional title:">#</a></h2><p>software engineer | thought leader | yuno ball</p>
<h2 id="what-do-you-do">what do you do? <a class="anchor" href="#what-do-you-do"
        title="Link to section: what do you do?" aria-label="Link to section: what do you do?">#</a></h2><p>I like building random things</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
